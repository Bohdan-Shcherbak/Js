// ***********************************************************************
// Стиль названия переменных
// CamelCase - горбатій стиль, все с большой буквы
// lowerCamelCase - все с большой, кроме первой

// Имена констант с заранее известными значениями, которые не меняются вообще принято писать:
// const BLOCK-SIZE = 25, const COLOR_RED="#F00"
//// ***********************************************************************
// тип данных bigint = 24580945890428542098n
// ***********************************************************************
// бинарные операторы - применяются к двум операндам
// let Number = 30-6
// унарный только к одному
// let Number = -30
// Унарный оператор может сделать из строки число
// console.log(+string1 + +string2); результатом будем число
// Также с помощью него можно сокращенно добавлять и подобное - users*=2
// ***********************************************************************
// Инкременты ++,--
// i++ = i + 1 = i +=1
// let i = 0
// Посфиксная форма і++
// let newi = i++
// newi будет равна всё ещё 0, т к передано быо значение 0, а прибавляет потом
// Префиксная форма ++i будет равна 1, т к оно сначало увеличило число, потом выдало
// ***********************************************************************
// нестрогое равенство == при сравнении изменяет к общему типу, строгое равенство === не изменяет, тоесть проверяет тип

// При умножении на строку идёт умножение
// let Number = 10 * "80" будет Число 800
// ***********************************************************************
// приоритеты логичесикх операторов
// ! имеет найвысший приоритет
// && > ||
// ***********************************************************************
// Использование логическиъ операторок как if
// let admins = 0,users=5
// admins>users || users++
// если в первом выражении мы получаем фолс, то переходим к следующему увеличивая переменную,
// если первое выражение правда, то дальше читаться не будет
// Другой пример
// let userName = '', userNickName = 'text'
// let user = userName || userNickName || 'notText'
// В этом примере userName равно фолс, потому сравнение идёт дальше,
// если userNickName имеет текст, то тру и будет выведено значение userNickName,
//  если нет то фолс и сравнение пойдёт дальше и будет выведено 'notText'
// ***********************************************************************
// ОПЕРАТОР сравнения с null "??" - возвращает первый операнд если он не Null или Undefined
// let name;
// console.log(name ?? 'text');
// Если name имеет тип нул или как сейчас не имеет значения, то выдаст фолс и перейдёт к следующему, а значит выведет текст
// если бы name было равно чему-то кроме нул или андф выдало бы его значение
// ***********************************************************************

// ЦЫКЛЫ
// цикл while в скобках имеет тольок сравнение, цикл будет действовать пока идётсравнение, и в теле добавление
// let i = 0;
while (i < 3) { // выводит 0, затем 1, затем 2
    alert(i);
    i++;
}
// Если тело цикла состоит лишь из одной инструкции, мы можем опустить фигурные скобки {…}:
// (i) = (i != 0)
let i = 3;
while (i) alert(i--);

// цикл do...while
// цикл сначало выполнит тело, а потом проверит условие, пока оно равно цикл будет продолжаться
i = 0;
do {
    alert(i);
    i++;
} while (i < 3);

// цикл for
// создает переменную, которая будет увеличиваться пока условие верно
for (let i = 0; i < 3; i++) {
    alert(i); // 0, 1, 2
}
// так же можно пропускать части кода

let k = 0; // мы уже имеем объявленную k с присвоенным значением
for (; k < 3; k++) { // нет необходимости в "начале"
    alert(i); // 0, 1, 2
}

let j = 0;
for (; j < 3;) {
    alert(j++);
}

// прерывание цикла break
// if (!value) break; // (*)

// Директива continue – «облегчённая версия» break. 
// При её выполнении цикл не прерывается, а переходит к следующей итерации (если условие все ещё равно true).
// if (i % 2 == 0) continue;

// Метка имеет вид идентификатора с двоеточием перед циклом:
outer:
for (let i = 0; i < 3; i++) { }
// метка нужна для того, чтобы закрыть цикл любой волоэенности

// Тоже самое что if(){}if(){}else. d<3?2:0
function rentalCarCost(d) { return d < 3 ? d * 40 : d >= 7 ? d * 40 - 50 : d >= 3 ? d * 40 - 20 : 0; }
// или через сase
let a = 2 + 2;

switch (a) {
    case 3:
        alert('Маловато');
        break;
    case 4:
        alert('В точку!');
        break;
    case 5:
        alert('Перебор');
        break;
    default:
        alert("Нет таких значений");
}



// *****************************************************************
